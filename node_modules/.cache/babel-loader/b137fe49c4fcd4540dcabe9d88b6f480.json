{"ast":null,"code":"import _defineProperty from \"/Users/tsedey.terefe/Code/React-projects/Soltia_AB/search-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/tsedey.terefe/Code/React-projects/Soltia_AB/search-app/src/component/inputForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Recipe from \"./Recipe\";\nimport moment from \"moment\";\nimport SearchHistory from \"./SearchHistory\";\nimport \"./inputForm.css\";\n\nclass InputForm extends Component {\n  constructor() {\n    super();\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getSearch = event => {\n      event.preventDefault();\n      const query = this.state.query;\n      const x = this.getQuery();\n      x.push({\n        title: query,\n        date: Date.now()\n      }); // banada\n      // {history: banana, date: date}\n\n      console.log(x);\n      this.storeQuery(x); // get data from localStorage\n      // push to data\n      // insert to localStorage\n\n      fetch(\"https://api.edamam.com/search?q=\".concat(query, \"&app_id=\").concat(process.env.App_ID, \" &app_key=\").concat(process.env.APP_KEY)).then(response => response.json()).then(data => this.setState({\n        recipeResult: data.hits,\n        query: \"\",\n        title: this.getQuery()\n      }));\n    };\n\n    this.getQuery = () => {\n      const history = localStorage.getItem(\"history\");\n\n      if (history) {\n        const parsedData = JSON.parse(history);\n        return parsedData;\n      }\n\n      return [];\n    };\n\n    this.clearStorage = () => {\n      localStorage.clear();\n      this.setState({\n        query: \"\"\n      });\n    };\n\n    this.clearQuery = date => {\n      const m = this.getQuery();\n      const z = m.filter(item => item.date !== date);\n      this.storeQuery(z); // Re-render\n\n      this.setState(_objectSpread({}, this.state));\n    };\n\n    this.state = {\n      query: \"\",\n      recipeResult: []\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /*\n  getHistory() {\n    const data = localStorage.getItem(\"HistoryQuery\");\n    const { query } = this.state;\n     this.setState({\n      query: data\n    });\n    console.log(query);\n  }\n  */\n  storeQuery(historyArray) {\n    localStorage.setItem(\"history\", JSON.stringify(historyArray));\n  }\n\n  initQuery() {\n    this.storeQuery([]);\n  }\n\n  componentDidMount() {\n    if (!this.getQuery()) {\n      this.initQuery();\n    }\n  }\n  /*\n  componentDidMount() {\n    this.searchedQuery = localStorage.getItem(\"HistoryQuery\");\n    if (localStorage.getItem(\"HistoryQuery\")) {\n      this.setState({\n        title: this.state.title.query\n      });\n    } else {\n      this.setState({\n        title: \"\"\n      });\n    }\n  }\n  componentWillUpdate(nextProps, nextState) {\n    //const { title } = this.state.title.query;\n    if (this.state.title !== nextState.title) {\n      const { title } = this.state;\n      const dateTime = Date.now();\n      localStorage.setItem(\"HistoryQuery\", title.query);\n      localStorage.setItem(\"HistoryDate\", dateTime);\n    }\n  }\n   .map(bar=><div></div>);\n  .map(bar=>(<div> \n    asdasdas\n    <div>)\n    )\n   .map(bar=>{\n       return <div></div>\n   })\n  */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form--container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.getSearch,\n      autoComplete: \"on\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"query\",\n      value: this.state.query,\n      placeholder: \"Search recipes  ...\",\n      onChange: this.onChange,\n      className: \"input--field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"search--btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"div\", {\n      className: \"searched--list--title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Search history\"), React.createElement(\"span\", {\n      onClick: this.clearStorage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Clear all\")), React.createElement(\"div\", {\n      className: \"search--list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.getQuery().map(history => React.createElement(SearchHistory, {\n      key: history.date,\n      historyTitle: history.title,\n      historyDate: moment(history.date).format(\"MMMM Do YYYY, h:mm:ss a\"),\n      clearBtn: React.createElement(\"button\", {\n        onClick: () => this.clearQuery(history.date),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \" \", \"X\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })))), this.state.recipeResult.map(item => React.createElement(Recipe, {\n      key: item.recipe.uri,\n      title: item.recipe.label,\n      calories: item.recipe.calories,\n      image: item.recipe.image,\n      ingredients: item.recipe.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default InputForm;","map":{"version":3,"sources":["/Users/tsedey.terefe/Code/React-projects/Soltia_AB/search-app/src/component/inputForm.js"],"names":["React","Component","Recipe","moment","SearchHistory","InputForm","constructor","onChange","event","setState","target","name","value","getSearch","preventDefault","query","state","x","getQuery","push","title","date","Date","now","console","log","storeQuery","fetch","process","env","App_ID","APP_KEY","then","response","json","data","recipeResult","hits","history","localStorage","getItem","parsedData","JSON","parse","clearStorage","clear","clearQuery","m","z","filter","item","bind","historyArray","setItem","stringify","initQuery","componentDidMount","render","map","format","recipe","uri","label","calories","image","ingredients"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Recipe from \"./Recipe\";\nimport moment from \"moment\";\nimport SearchHistory from \"./SearchHistory\";\nimport \"./inputForm.css\";\nclass InputForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      query: \"\",\n      recipeResult: []\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  getSearch = event => {\n    event.preventDefault();\n    const { query } = this.state;\n    const x = this.getQuery();\n    x.push({ title: query, date: Date.now() });\n    // banada\n    // {history: banana, date: date}\n    console.log(x);\n    this.storeQuery(x);\n    // get data from localStorage\n    // push to data\n    // insert to localStorage\n    fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${process.env.App_ID} &app_key=${process.env.APP_KEY}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          recipeResult: data.hits,\n          query: \"\",\n          title: this.getQuery()\n        })\n      );\n  };\n  /*\n  getHistory() {\n    const data = localStorage.getItem(\"HistoryQuery\");\n    const { query } = this.state;\n\n    this.setState({\n      query: data\n    });\n    console.log(query);\n  }\n*/\n\n  storeQuery(historyArray) {\n    localStorage.setItem(\"history\", JSON.stringify(historyArray));\n  }\n  getQuery = () => {\n    const history = localStorage.getItem(\"history\");\n    if (history) {\n      const parsedData = JSON.parse(history);\n      return parsedData;\n    }\n    return [];\n  };\n\n  initQuery() {\n    this.storeQuery([]);\n  }\n\n  componentDidMount() {\n    if (!this.getQuery()) {\n      this.initQuery();\n    }\n  }\n  /*\n  componentDidMount() {\n    this.searchedQuery = localStorage.getItem(\"HistoryQuery\");\n    if (localStorage.getItem(\"HistoryQuery\")) {\n      this.setState({\n        title: this.state.title.query\n      });\n    } else {\n      this.setState({\n        title: \"\"\n      });\n    }\n  }\n  componentWillUpdate(nextProps, nextState) {\n    //const { title } = this.state.title.query;\n    if (this.state.title !== nextState.title) {\n      const { title } = this.state;\n      const dateTime = Date.now();\n      localStorage.setItem(\"HistoryQuery\", title.query);\n      localStorage.setItem(\"HistoryDate\", dateTime);\n    }\n  }\n\n  .map(bar=><div></div>);\n  .map(bar=>(<div> \n    asdasdas\n    <div>)\n    )\n   .map(bar=>{\n       return <div></div>\n   })\n*/ clearStorage = () => {\n    localStorage.clear();\n    this.setState({\n      query: \"\"\n    });\n  };\n  clearQuery = date => {\n    const m = this.getQuery();\n    const z = m.filter(item => item.date !== date);\n    this.storeQuery(z);\n    // Re-render\n    this.setState({ ...this.state });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"form--container\">\n          <form onSubmit={this.getSearch} autoComplete=\"on\">\n            <input\n              type=\"text\"\n              name=\"query\"\n              value={this.state.query}\n              placeholder=\"Search recipes  ...\"\n              onChange={this.onChange}\n              className=\"input--field\"\n            ></input>\n            <button className=\"search--btn\" type=\"submit\">\n              Search\n            </button>\n          </form>\n          <div className=\"searched--list--title\">\n            <span>Search history</span>\n            <span onClick={this.clearStorage}>Clear all</span>\n          </div>\n          <div className=\"search--list\">\n            {this.getQuery().map(history => (\n              <SearchHistory\n                key={history.date}\n                historyTitle={history.title}\n                historyDate={moment(history.date).format(\n                  \"MMMM Do YYYY, h:mm:ss a\"\n                )}\n                clearBtn={\n                  <button onClick={() => this.clearQuery(history.date)}>\n                    {\" \"}\n                    X\n                  </button>\n                }\n              />\n            ))}\n          </div>\n        </div>\n        {this.state.recipeResult.map(item => (\n          <Recipe\n            key={item.recipe.uri}\n            title={item.recipe.label}\n            calories={item.recipe.calories}\n            image={item.recipe.image}\n            ingredients={item.recipe.ingredients}\n          />\n        ))}\n      </div>\n    );\n  }\n}\nexport default InputForm;\n"]},"metadata":{},"sourceType":"module"}